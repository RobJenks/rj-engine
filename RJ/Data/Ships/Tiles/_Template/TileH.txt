#pragma once

#include "ComplexShipTile.h"
class CSEngineRoomTileDefinition;


class CSEngineRoomTile: public ComplexShipTile
{
public:


	// Default constructor
	CSEngineRoomTile(void);

	// Public inherited virtual method to return the type of ship tile this object represents
	CMPINLINE D::TileClass					GetClass(void) const { return D::TileClass::EngineRoom; }

	// Static method to return the class; allows this to be determined based on the class and not an instance
	CMPINLINE static D::TileClass			GetClassStatic(void) { return D::TileClass::EngineRoom; }

	// Simulation method for this tile
	void									PerformTileSimulation(unsigned int delta_ms);

	// We store a direct reference to the power generator definition for more efficient runtime access
	const CSEngineRoomTileDefinition *		GetEngineRoomTileDefinition(void) const { return m_engineroomdef; }
	void									StoreEngineRoomTileDefinition(const CSEngineRoomTileDefinition *def) { m_engineroomdef = def; }


	// Recalculates all values following a change to our parameters
	CMPINLINE void										RecalculateParameters(void)
	{
		// SetTimeSimulationRequired(...)
	}


	// Apply the contents of the tile to its parent objects.  Called upon linking, plus on repair of the ship.  Inherited virtual.
	CMPINLINE void										ApplyTileSpecific(void) { }

	// Virtual inherited method to make a copy of this tile and return it
	ComplexShipTile *									Copy(void) const;

	// Virtual & static methods respectively to generate and read XML data representing the tile
	TiXmlElement *										GenerateXML(void);						// Virtual inherited since is called on an instance of a tile

																								// Virtual method to read any class-specific data for this tile type
	void												ReadClassSpecificXMLData(TiXmlElement *node);

	// Processes a debug tile command from the console
	void												ProcessDebugTileCommand(GameConsoleCommand & command);

	// Default destructor
	~CSEngineRoomTile(void);

private:

	const CSEngineRoomTileDefinition *					m_engineroomdef;


};