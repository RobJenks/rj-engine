#ifndef __ShadowMapResourcesHLSL__
#define __ShadowMapResourcesHLSL__

#include "../../../Definitions/CppHLSLLocalisation.hlsl.h"

// --------------------------------------------------------------------------------
// Shadow map vertex shader output.  Minimal with geometric data only
struct ShadowMappingVertexShaderOutput
{
	float4 position					RJ_SEMANTIC(SV_POSITION);	// Clip-space position
};


// --------------------------------------------------------------------------------
// Input buffer to the shadow map generation process
CBUFFER LightSpaceShadowMapDataBuffer REGISTER(b4)
{
	RJ_ROW_MAJOR_MATRIX				LightViewProjection;

	// Padding
	//float# _padding_sm;			// CB size must be a multiple of 16 bytes
};


// --------------------------------------------------------------------------------
// Buffer holding shadow mapping data for a given light, for rendering using the shadow map
// TODO: If none of this data is generated BY the shadow map process, could combine with the 
// previous SM input buffer and bind same buffer to both stages, saving map/unmap time
CBUFFER ShadowMappedLightBuffer REGISTER(b5)
{
	// Transformation from camera projection space to light projection space
	// Evaluates to [CamInvProj * CamInvView * LightView * LightProj]
	RJ_ROW_MAJOR_MATRIX CamToLightProjection;


	// Padding
	//float# _padding_sm;			// CB size must be a multiple of 16 bytes
};

// --------------------------------------------------------------------------------
// Shadow map depth texture resource; either bound as SM render target, or as lighting PS input
TEXTURE2D ShadowMapTexture REGISTER(t10);


// --------------------------------------------------------------------------------
// String references to each buffer for application parameter binding
#define LightSpaceShadowMapDataBufferName BUFFER_NAME(LightSpaceShadowMapDataBuffer)
#define ShadowMappedLightBufferName BUFFER_NAME(ShadowMappedLightBuffer)
#define ShadowMapTextureName BUFFER_NAME(ShadowMapTexture)


#endif