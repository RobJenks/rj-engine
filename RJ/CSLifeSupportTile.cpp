#include "Utility.h"
#include "GameDataExtern.h"
#include "AdjustableParameter.h"
#include "XMLGenerator.h"
#include "ComplexShip.h"
#include "ComplexShipTileClass.h"
#include "ComplexShipTileDefinition.h"
#include "CSLifeSupportTileDefinition.h"

#include "CSLifeSupportTile.h"
class ComplexShip;

// Default constructor
CSLifeSupportTile::CSLifeSupportTile(void)
{
	// Life support tiles do require simulation by default
	ActivateSimulation(Game::C_TILE_LIFESUPPORT_SIMULATION_INTERVAL);

	// Initialise default values for each life support property
	Gravity = AdjustableParameter<float>(0.0f, 20.0f, 9.8f, 9.8f, 1.0f);
	OxygenLevel = AdjustableParameter<int>(0, 100, 100, 100, 2);
	OxygenRange = AdjustableParameter<int>(10, 30, 20, 20, 1);

	// Life support systems begin at full effectivity
	m_effectivity = 1.0f;
	m_gravityrange = 0;
}

// Simulation method for this tile.  This method will only be called if m_requiressimulation == true
void CSLifeSupportTile::PerformTileSimulation(unsigned int delta_ms)
{
	// Parameter check
	if (!m_parent) return;

	// Update the ship gravity level; ship should take the maximum level of any life support systems on board
	Gravity.Update(delta_ms);
	m_parent->UpdateGravity();
	
	// Update the oxygen levels
	OxygenLevel.Update(delta_ms);
	OxygenRange.Update(delta_ms);

	// Refresh the oxygen content of all elements in range of this system
	m_parent->UpdateOxygenLevels();

	// If all life-support parameters are now at their target value, stop simulating.  Otherwise we
	// keep the flag set for continued simulation next frame
	m_requiressimulation = !(Gravity.IsAtTarget() && OxygenLevel.IsAtTarget() && OxygenRange.IsAtTarget());
}

// One of the primary tile methods, to return the percentage of Gravity.Value generated by this 
// system at a particular location in the environment
float CSLifeSupportTile::GetGravityPercentage(int x, int y, int z) const
{
	// We must have a valid definition reference to calculate gravity strength
	if (!m_lifesupportdef) return 0.0f;

	// Get the integer squared distance from this tile to the target location
	INTVECTOR3 diff = INTVECTOR3(m_elementlocation.x - x, m_elementlocation.y - y, m_elementlocation.z - z);
	int dist = (diff.x*diff.x + diff.y*diff.y + diff.z*diff.z);

	// Sqrt to get the closest integer distance.  Should be fast (lookup) as long as distsq is within the sqrt cache size
	dist = (int)fast_sqrt(dist);

	// Get the gravity percentage for this distance, modify by the current effectivity value and return
	return (m_lifesupportdef->GetGravityStrength(dist) * m_effectivity);
}

// Virtual method to read any class-specific data for this tile type
void CSLifeSupportTile::ReadClassSpecificXMLData(TiXmlElement *node)
{
	// TODO: Do this
}

// Apply the contents of the tile to its parent objects.  Called upon linking, plus on repair of the ship.  Inherited virtual.
void CSLifeSupportTile::ApplyTileSpecific(void)
{

}

// Virtual inherited method to make a copy of this tile and return it
ComplexShipTile *CSLifeSupportTile::Copy(void) const
{
	// Call the copy constructor, which will in turn call the base class copy constructor, to create a copy of this tile
	return new CSLifeSupportTile(*this);
}

// Copy constructor
CSLifeSupportTile::CSLifeSupportTile(const CSLifeSupportTile &C) : ComplexShipTile(C)
{
	/* Copy class-specific properties here */

	// Copy the reference to this tile's class definition
	m_lifesupportdef = C.GetLifeSupportTileDefinition();

	// Copy all life support properties
	Gravity = C.Gravity;
	OxygenLevel = C.OxygenLevel;
	OxygenRange = C.OxygenRange;
	m_gravityrange = C.GetGravityRange();
	m_effectivity = C.GetEffectivity();
}

// Default destructor
CSLifeSupportTile::~CSLifeSupportTile(void)
{
}


// Static class method to generate XML data for a corridor tile
TiXmlElement *CSLifeSupportTile::GenerateXML(void)
{
	// Create a new node to hold this data
	TiXmlElement *node = new TiXmlElement(D::NODE_ComplexShipTile);
	node->SetAttribute("code", m_definition->GetCode().c_str());

	// First, have the base class generate XML for all common tile properties
	TiXmlElement *base = ComplexShipTile::GenerateBaseClassXML(this);
	if (!base) { delete node; return NULL; }
	node->LinkEndChild(base);

	// Now generate XML for all properties specific to this tile class
	/* No corridor tile-specific properties right now */

	// Return a reference to the new node
	return node;
}